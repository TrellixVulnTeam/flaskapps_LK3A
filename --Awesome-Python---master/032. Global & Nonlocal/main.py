# 프로그래밍 언어에서 특정한 요소를 이름에 따라 구분할 수 있는 범위를 말하는 namespace라는 개념이 있다
# 모든 변수와 함수의 이름을 unique하게 만드는 것은 현실적으로 불가능하며,
# 따라서 네임스페이스라는 개념을 도입하여 특정한 하나의 이름이 통용될 수 있는 범위를 제한한다
# 그러므로 소속된 네임스페이스가 다르면, 같은 이름이 서로 다른 요소를 가리키게 된다
# 지역 변수와 전역 변수 개념을 생각할 수 있다

# 1. 지역 네임스페이스 : 클래스, 함수, 메소드별로 존재하며 지역 네임스페이스의 변수들을 지역 변수라고 부른다
# 2. 전역 네임스페이스 : 모듈별로 존재하며, 모듈 전체에 통용되는 이름이며 전역 네임스페이스의 변수들을 전역 변수라고 부른다
# 3. 빌트인 네임스페이스 : 빌트인 함수 및 예외 등의 이름이 존재하는 곳

name = 'PlanB'
# name : 전역 네임스페이스에 할당되는 이름

def sum(a, b):
    s = a + b
    # s : 지역 네임스페이스에 할당되는 이름
    return s

# -- Shadowing
# Shadowing은 특정한 스코프 내에서 선언된 이름이 외부 스코프와 중첩되는 것을 말한다(네임 마스킹이라고도 함)
# 이 경우 지역 네임스페이스가 우선적으로 참조되며, 이후 외부 네임스페이스를 참조한다

def get_name():
    name = 'JoMingyu'

    return name
    # 현재 함수(지역 네임스페이스)에 name이 존재하므로 해당 이름을 사용

print(get_name()) # 'JoMingyu'

def get_name_2():
    return name
    # 현재 함수(지역 네임스페이스)에 name이 존재하지 않으므로 외부 스코프의 name을 사용

print(get_name_2()) # 'PlanB'
# 전역 네임스페이스에도 존재하지 않는 이름이라면, 빌트인 네임스페이스에서 해당 이름을 찾으며 발견되지 않으면 오류가 발생

# 아래의 경우에는 Shadowing을 알아차리기 어렵다
value = 3

def add_value(n):
    value = value + n
    # 전역 네임스페이스의 value를 변경하는 것처럼 보이나, 실제로는 지역 네임스페이스로서 value가 선언됨
    # 따라서 Shadowing은 읽기 시점에만 적용되며, 대입식의 좌변으로 표시되는 모든 변수는 지역 네임스페이스에 들어감

add_value(1)
print(value) # 3

# 함수 내에서 전역, 또는 상위 네임스페이스의 값을 참조하여 읽기만 하는 경우가 아니라면 shadowing이 일어나지 않아 혼란을 줄 수 있으므로
# 명시적으로 해당 이름은 전역 네임스페이스에서 가져온다는 것을 지정해야 한다
# 이 때 global과 nonlocal statement를 사용한다
# global x : 현재 스코프에 상관 없이 x는 전역 네임스페이스를 참조한다
# nonlocal x : 전역 네임스페이스를 포함한 '상위' 네임스페이스를 참조한다

def add_value(n):
    global value
    value += n

add_value(1)
print(value) # 4
# 그러나 특정 스코프 내에서 전역 변수를 변경하는 것은 매우 좋지 않으며
# 이 때문에 매우 특별한 경우가 아니라면 global과 nonlocal은 사용하지 않는 것이 좋다
