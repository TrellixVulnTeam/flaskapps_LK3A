# Burp-UI configuration file
# @version@ - 0.3.0.dev
# @release@ - devel
[Global]
# burp backend to load either one of 'burp1', 'burp2', 'parallel' or 'multi'.
# If you choose 'multi', you will have to declare at lease one 'Agent' section.
# If you choose 'parallel', you need to configure the [Parallel] section.
# If you choose either 'burp1' or 'burp2', you need to configure the [Burp]
# section.
# The [Burp] section is also used with the 'parallel' backend for the restoration
# process.
# You can also use whatever custom backend you like if it is located in the
# 'plugins' directory and if it implements the right interface.
backend = multi
# authentication plugin (mandatory)
# list the misc/auth directory to see the available backends
# to disable authentication you can set "auth: none"
# you can also chain multiple backends. Example: "auth: ldap,basic"
# the order will be respected unless you manually set a higher backend priority
auth = basic
# acl plugin
# list misc/acl directory to see the available backends
# default is no ACL
acl = basic
demo = true
dsn = @DSN@
piwik_url = @PIWIK_URL@
piwik_script = @PIWIK_SCRIPT@
piwik_id = @PIWIK_ID@

[UI]
# refresh interval of the pages in seconds
refresh = 180
# refresh interval of the live-monitoring page in seconds
liverefresh = 5
# list of labels to ignore (you can use regex)
ignore_labels = "color:.*"
# format label using sed-like syntax
format_labels = "s/^os:\s*//"

[Production]
# storage backend for session and cache
# may be either 'default' or 'redis'
storage = redis
# redis server to connect to
redis = demo-redis:6379
# whether to use celery or not
celery = true
# database url to store some persistent data
# example: sqlite:////var/lib/burpui/store.db
database = postgresql://burpui:burpui@demo-pg/burpuidb
# limit the API rate
limiter = true
ratio = 60/minute
# You can change the prefix if you are behind a reverse-proxy under a custom
# root path. For example: /burpui
# You can also configure your reverse-proxy to announce the prefix through the
# 'X-Script-Name' header. In this case, the bellow prefix will be ignored in
# favour of the one announced by your reverse-proxy
prefix = none

[WebSocket]
## This section contains WebSocket server specific options.
# whether to embed the websocket server or not
# if set to "true", you should have only *one* gunicorn worker
# see here for details:
# https://flask-socketio.readthedocs.io/en/latest/#gunicorn-web-server
embedded = false
# what broker to use to interact between websocket servers
# may be a redis url like: redis://localhost:6379/0
# if set to "true" or "redis" or "default", the url defaults to:
# redis://<redis_host>:<redis_port>/4
# where <redis_host> is the host part, and <redis_port> is the port part of
# the above "redis" setting
# set this to none to disable the broker
broker = redis
# if you choose to run a dedicated websocket server (with embedded = false)
# you can specify here the websocket url. You'll need to double quote your
# string though.
# example:
# url = "document.domain + ':5001'"
url = none
# whether to enable verbose websocket server logs or not (for development)
debug = false

[Security]
## This section contains some security options. Make sure you understand the
## security implications before changing these.
# list of 'root' paths allowed when sourcing files in the configuration.
# Set this to 'none' if you don't want any restrictions, keeping in mind this
# can lead to accessing sensible files. Defaults to '/etc/burp'.
# Note: you can have several paths separated by comas.
# Example: /etc/burp,/etc/burp.d
includes = /etc/burp
# if files already included in config do not respect the above restriction, we
# prune them
enforce = false
# enable certificates revocation
revoke = false
# remember_cookie duration in days
cookietime = 14
# whether to use a secure cookie for https or not. If set to false, cookies
# won't have the 'secure' flag.
# This setting is only useful when HTTPS is detected
scookie = true
# application secret to secure cookies. If you don't set anything, the default
# value is 'random' which will generate a new secret after every restart of your
# application. You can also set it to 'none' although this is not recommended.
# /!\ YOU CANNOT USE THE MAGIC 'random' VALUE WHEN USING GUNICORN /!\
appsecret = @RANDOM@

[Experimental]
## This section contains some experimental features that have not been deeply
## tested yet
# enable zip64 feature. Python doc says:
# « ZIP64 extensions are disabled by default because the default zip and unzip
# commands on Unix (the InfoZIP utilities) don’t support these extensions. »
zip64 = true
# disable server initiated restoration if `bconfcli` file contains
# `server_can_restore = 0`
noserverrestore = true

## basicauth specific options
## Note: in case you leave this section commented, the default login/password
## is admin/admin
[BASIC]
## Backend priority. Higher is first
#priority = 2
#admin = password
#user1 = otherpassword
admin = pbkdf2:sha256:50000$tBmBFbIb$645e36483a936aa2c54ba7f4b0908e8fd45aebdcddc07343b11bac099732c61d
demo = pbkdf2:sha256:50000$Rd7VUJ9Z$2e91276223d6371ec83bbad7e96c207bee940994e718be44ef274403f3de4a26
moderator = pbkdf2:sha256:50000$vLjiLsda$c848e929190a5cf8e237caf35032bef4a0e73469152d9c89b4cc803ffd9c4d51

## acl engine global options
#[ACL]
## Enable extended matching rules (enabled by default)
## If the rule is a string like 'user1 = desk*', it will match any client that
## matches 'desk*' no mater what agent it is attached to.
## If it is a coma separated list of strings like 'user1 = desk*,laptop*' it
## will match the first matching rule no mater what agent it is attached to.
## If it is a dict like:
## user1 = '{"agents": ["srv*", "www*"], "clients": ["desk*", "laptop*"]}'
## It will also validate against the agent name.
#extended = true
## If you don't explicitly specify ro/rw grants, what should we assume?
#assume_rw = true
## Enable 'legacy' behavior
## Since v0.6.0, if you don't specify the agents name explicitly, users will be
## granted on every agents where a client matches user's ACL. If you enable the
## 'legacy' behavior, you will need to specify the agents explicitly.
## Note: enabling this option will also disable the extended mode
#legacy = false
## The inheritance order maters, it means depending the order you choose,
## the ACL engine won't handle the grants the same way.
## By default, ACL inherited by groups will have lower priority, unless you
## choose otherwise
#inverse_inheritance = false
## If you specify agents and clients separately, should we link them implicitly?
## For instance, '{"agents": ["agent1", "agent2"], "clients": ["client1", "client2"]}'
## will become: '{"agents": {"agent1": ["client1", "client2"], "agent2": ["client1", "client2"]}}'
#implicit_link = true

## basicacl specific options
## Note: in case you leave this section commented, the user 'admin' will have
## access to all clients whereas other users will only see the client that have
## the same name
[BASIC:ACL]
## Please note the double-quote around the username on the admin line are
## mandatory!
#admin = user1,user2
## You can also overwrite the default behavior by specifying which clients a
## user can access
#user3 = '["client4", "client5"]'
## In case you are not in a standalone mode, you can also specify which clients
## a user can access on a specific Agent
#user4 = '{"agent1": ["client6", "client7"], "agent2": ["client8"]}'
admin = admin
@moderator = '{"agents": {"ro": "Burp1", "rw": "Burp2"}}'
+moderator = moderator
demo = '{"agents": {"Burp1": ["demo2"]}}'

# If you set standalone to 'false', add at least one section like this per
# bui-agent
[Agent:Burp1]
host = demo-burp1
port = 10000
password = azerty
ssl = false
timeout = 15

[Agent:Burp2]
host = demo-burp2
port = 10000
password = azerty
ssl = false
timeout = 15
